// Prompt for React code (used with Copilot, ChatGPT, etc)

// Goal: Build a responsive and secure UI for a decentralized app (dApp)
// Stack: React,Next.js, TailwindCSS, Ethers.js, Avalanche C-Chain

// ✅ Best Practices
- Use functional components with hooks
- Use context for local state or Redux for global state management
- Keep components atomic and reusable
- Validate inputs before submitting blockchain transactions
- Show transaction status (loading, success, error)
- Use TailwindCSS for styling
- Handle Avalanche chain switching and wallet connection

// ⚙️ Functional Requirements
- Connect MetaMask (or Core Wallet)
- Show wallet address + balance
- Allow users to send AVAX or interact with smart contracts
- Display readable errors from failed transactions
- Use ABI from contract deployed on Fuji or Mainnet
